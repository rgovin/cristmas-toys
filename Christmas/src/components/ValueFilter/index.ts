import { Component } from '../Component';import { Basic, Data, Template } from '../../types/types';import html from './template.html';interface Props {  onColor: (color: string) => void;  onShape: (shape: string) => void;  onSize: (color: string) => void;  onFavourite: () => string;}interface Model {  colors: Basic[];  shape: string;  size: number;  favourite: boolean;}export class ValueFilter extends Component {  constructor() {    super(html);    this.model = {      colors: [],      shape: '',      size: 0,      favorite: false,    };    this.init();  }  onColorHandler({ target }: Event ){    const { value } = target as HTMLInputElement;    const colors = this.model.colors as string[];    const exitIndex = colors.indexOf(value);    if (exitIndex !== -1) colors.splice(exitIndex, 1);    else if (value) colors.push(value);    this.model = {      ...this.model,      colors,    };    console.log('target', value);  }  onShapeHandler(){  }  init(){    console.log('ValueFilter init');    this.renderEffects.add((parent: HTMLElement) => {      const colorContainer = (parent).querySelector('.color-container');      console.log(colorContainer);      if (colorContainer)        colorContainer.addEventListener('click', this.onColorHandler.bind(this));    });  }}